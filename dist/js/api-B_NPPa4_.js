const t="http://localhost:5050",e={getReports:async(e={})=>{const o=new URLSearchParams;e.status&&o.append("status",e.status),e.type&&o.append("type",e.type),e.page&&o.append("page",e.page),e.limit&&o.append("limit",e.limit);const a=`${t}/api/reports${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch reports: ${r.status} - ${t}`)}return await r.json()},updateReportStatus:async(e,o,a="")=>{const r=await fetch(`${t}/api/reports/${e}/status`,{method:"PUT",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"},body:JSON.stringify({status:o,adminNotes:a})});if(!r.ok)throw new Error("Failed to update report status");return r.json()},getReportStats:async()=>{const e=await fetch(`${t}/api/reports/stats`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!e.ok)throw new Error("Failed to fetch report statistics");return e.json()},adminLogin:async e=>{const o=await fetch(`${t}/api/auth/admin-login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Admin login failed");return o.json()},getAllUsers:async(e={})=>{const o=new URLSearchParams;e.page&&o.append("page",e.page),e.limit&&o.append("limit",e.limit),e.search&&o.append("search",e.search),e.role&&o.append("role",e.role);const a=`${t}/api/users/admin/all${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch users: ${r.status} - ${t}`)}return r.json()},getUserStatsAdmin:async()=>{const e=await fetch(`${t}/api/users/admin/stats`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!e.ok)throw new Error("Failed to fetch user statistics");return e.json()},createUser:async e=>{const o=await fetch(`${t}/api/users/admin/create`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok){const t=await o.json().catch(()=>({message:"Unknown error"}));throw new Error(t.message||"Failed to create user")}return o.json()},updateUserRole:async(e,o)=>{const a=await fetch(`${t}/api/users/admin/${e}/role`,{method:"PUT",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"},body:JSON.stringify({role:o})});if(!a.ok){const t=await a.json().catch(()=>({message:"Unknown error"}));throw new Error(t.message||"Failed to update user role")}return a.json()},deleteUser:async e=>{const o=await fetch(`${t}/api/users/admin/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.json().catch(()=>({message:"Unknown error"}));throw new Error(t.message||"Failed to delete user")}return o.json()},getAllArtworks:async()=>{const e=await fetch(`${t}/api/artforms`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!e.ok){const t=await e.text();throw new Error(`Failed to fetch artworks: ${e.status} - ${t}`)}return e.json()},deleteArtwork:async e=>{const o=await fetch(`${t}/api/artforms/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.json().catch(()=>({message:"Unknown error"}));throw new Error(t.message||"Failed to delete artwork")}return o.json()},getAllEvents:async(e={})=>{const o=new URLSearchParams;e.creatorRole&&o.append("creatorRole",e.creatorRole),void 0!==e.upcoming&&o.append("upcoming",e.upcoming);const a=`${t}/api/events${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch events: ${r.status} - ${t}`)}return(await r.json()).data||[]},deleteEvent:async e=>{const o=await fetch(`${t}/api/events/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.json().catch(()=>({message:"Unknown error"}));throw new Error(t.message||"Failed to delete event")}return o.json()}},o={login:async e=>{const o=await fetch(`${t}/api/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Login failed");return o.json()},register:async e=>{const o=await fetch(`${t}/api/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Registration failed");return o.json()},submitReport:async e=>{const o=await fetch(`${t}/api/reports`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Failed to submit report");return o.json()},getUserReports:async()=>{const e=await fetch(`${t}/api/reports/user`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!e.ok)throw new Error("Failed to fetch user reports");return e.json()},getEvents:async(e={})=>{const o=new URLSearchParams;e.category&&o.append("category",e.category),e.type&&o.append("type",e.type),e.city&&o.append("city",e.city),e.state&&o.append("state",e.state),e.upcoming&&o.append("upcoming",e.upcoming),e.organizer&&o.append("organizer",e.organizer);const a=`${t}/api/events${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch events: ${r.status} - ${t}`)}return r.json()},getArtists:async(e={})=>{const o=new URLSearchParams;e.featured&&o.append("featured",e.featured),e.search&&o.append("search",e.search),e.limit&&o.append("limit",e.limit),e.page&&o.append("page",e.page),e.sortBy&&o.append("sortBy",e.sortBy),e.sortOrder&&o.append("sortOrder",e.sortOrder);const a=`${t}/api/users/artists${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch artists: ${r.status} - ${t}`)}return r.json()},getArtist:async e=>{const o=`${t}/api/users/artists/${e}`,a=await fetch(o,{method:"GET",headers:{"Content-Type":"application/json"}});if(!a.ok){const t=await a.text();throw new Error(`Failed to fetch artist: ${a.status} - ${t}`)}return a.json()},getArtworks:async(e={})=>{const o=new URLSearchParams;e.category&&o.append("category",e.category),e.search&&o.append("search",e.search),e.limit&&o.append("limit",e.limit),e.page&&o.append("page",e.page),e.sortBy&&o.append("sortBy",e.sortBy),e.sortOrder&&o.append("sortOrder",e.sortOrder),e.userId&&o.append("userId",e.userId);const a=`${t}/api/artforms${o.toString()?"?"+o.toString():""}`,r=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw new Error(`Failed to fetch artworks: ${r.status} - ${t}`)}return r.json()},toggleFollow:async e=>{const o=await fetch(`${t}/api/users/follow/${e}`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw new Error(`Failed to toggle follow: ${o.status} - ${t}`)}return o.json()},toggleLike:async e=>{const o=await fetch(`${t}/api/users/like/${e}`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw new Error(`Failed to toggle like: ${o.status} - ${t}`)}return o.json()},toggleBookmark:async e=>{const o=await fetch(`${t}/api/users/bookmark/${e}`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw new Error(`Failed to toggle bookmark: ${o.status} - ${t}`)}return o.json()},getCurrentUser:async()=>{const e=await fetch(`${t}/api/users/profile`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json"}});if(!e.ok){const t=await e.text();throw new Error(`Failed to fetch current user: ${e.status} - ${t}`)}return e.json()}};export{o as a,e as b};
