const t="http://localhost:5050",e={getReports:async(e={})=>{const r=new URLSearchParams;e.status&&r.append("status",e.status),e.type&&r.append("type",e.type),e.page&&r.append("page",e.page),e.limit&&r.append("limit",e.limit);const a=`${t}/api/reports${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch reports: ${o.status} - ${t}`)}return await o.json()},updateReportStatus:async(e,r,a="")=>{const o=await fetch(`${t}/api/reports/${e}/status`,{method:"PUT",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify({status:r,adminNotes:a})});if(!o.ok)throw Error("Failed to update report status");return o.json()},getReportStats:async()=>{const e=await fetch(t+"/api/reports/stats",{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!e.ok)throw Error("Failed to fetch report statistics");return e.json()},adminLogin:async e=>{try{const a=await fetch(t+"/api/auth/admin-login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!a.ok){let t="Admin login failed";try{t=(await a.json()).message||t}catch(r){t=await a.text()||t}throw Error(`${a.status}: ${t}`)}return await a.json()}catch(a){if("TypeError"===a.name&&a.message.includes("fetch"))throw Error("Network error: Could not connect to server. Please check if the server is running.");throw a}},getAllUsers:async(e={})=>{const r=new URLSearchParams;e.page&&r.append("page",e.page),e.limit&&r.append("limit",e.limit),e.search&&r.append("search",e.search),e.role&&r.append("role",e.role);const a=`${t}/api/users/admin/all${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch users: ${o.status} - ${t}`)}return o.json()},getUserStatsAdmin:async()=>{const e=await fetch(t+"/api/users/admin/stats",{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!e.ok)throw Error("Failed to fetch user statistics");return e.json()},createUser:async e=>{const r=await fetch(t+"/api/users/admin/create",{method:"POST",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok){const t=await r.json().catch(()=>({message:"Unknown error"}));throw Error(t.message||"Failed to create user")}return r.json()},updateUserRole:async(e,r)=>{const a=await fetch(`${t}/api/users/admin/${e}/role`,{method:"PUT",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify({role:r})});if(!a.ok){const t=await a.json().catch(()=>({message:"Unknown error"}));throw Error(t.message||"Failed to update user role")}return a.json()},deleteUser:async e=>{const r=await fetch(`${t}/api/users/admin/${e}`,{method:"DELETE",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.json().catch(()=>({message:"Unknown error"}));throw Error(t.message||"Failed to delete user")}return r.json()},getAllArtworks:async()=>{const e=await fetch(t+"/api/artworks",{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!e.ok){const t=await e.text();throw Error(`Failed to fetch artworks: ${e.status} - ${t}`)}const r=await e.json();return r.data||r},deleteArtwork:async e=>{const r=await fetch(`${t}/api/artworks/${e}`,{method:"DELETE",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.json().catch(()=>({message:"Unknown error"}));throw Error(t.message||"Failed to delete artwork")}return r.json()},getAllEvents:async(e={})=>{const r=new URLSearchParams;e.creatorRole&&r.append("creatorRole",e.creatorRole),void 0!==e.upcoming&&r.append("upcoming",e.upcoming);const a=`${t}/api/events${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch events: ${o.status} - ${t}`)}return(await o.json()).data||[]},deleteEvent:async e=>{const r=await fetch(`${t}/api/events/${e}`,{method:"DELETE",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.json().catch(()=>({message:"Unknown error"}));throw Error(t.message||"Failed to delete event")}return r.json()}},r={login:async e=>{const r=await fetch(t+"/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw Error("Login failed");return r.json()},register:async e=>{const r=await fetch(t+"/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw Error("Registration failed");return r.json()},submitReport:async e=>{const r=await fetch(t+"/api/reports",{method:"POST",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw Error("Failed to submit report");return r.json()},getUserReports:async()=>{const e=await fetch(t+"/api/reports/user",{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!e.ok)throw Error("Failed to fetch user reports");return e.json()},getEvents:async(e={})=>{const r=new URLSearchParams;e.category&&r.append("category",e.category),e.type&&r.append("type",e.type),e.city&&r.append("city",e.city),e.state&&r.append("state",e.state),e.upcoming&&r.append("upcoming",e.upcoming),e.organizer&&r.append("organizer",e.organizer);const a=`${t}/api/events${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch events: ${o.status} - ${t}`)}return o.json()},getArtists:async(e={})=>{const r=new URLSearchParams;e.featured&&r.append("featured",e.featured),e.search&&r.append("search",e.search),e.limit&&r.append("limit",e.limit),e.page&&r.append("page",e.page),e.sortBy&&r.append("sortBy",e.sortBy),e.sortOrder&&r.append("sortOrder",e.sortOrder);const a=`${t}/api/users/artists${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch artists: ${o.status} - ${t}`)}return o.json()},getArtist:async e=>{const r=`${t}/api/users/artists/${e}`,a=await fetch(r,{method:"GET",headers:{"Content-Type":"application/json"}});if(!a.ok){const t=await a.text();throw Error(`Failed to fetch artist: ${a.status} - ${t}`)}return a.json()},getArtworks:async(e={})=>{const r=new URLSearchParams;e.category&&r.append("category",e.category),e.search&&r.append("search",e.search),e.limit&&r.append("limit",e.limit),e.page&&r.append("page",e.page),e.sortBy&&r.append("sortBy",e.sortBy),e.sortOrder&&r.append("sortOrder",e.sortOrder),e.userId&&r.append("userId",e.userId);const a=`${t}/api/artworks${r.toString()?"?"+r.toString():""}`,o=await fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok){const t=await o.text();throw Error(`Failed to fetch artworks: ${o.status} - ${t}`)}return o.json()},toggleLike:async e=>{const r=await fetch(`${t}/api/artworks/${e}/like`,{method:"POST",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw Error(`Failed to toggle like: ${r.status} - ${t}`)}return r.json()},toggleBookmark:async e=>{const r=await fetch(`${t}/api/artworks/${e}/bookmark`,{method:"POST",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw Error(`Failed to toggle bookmark: ${r.status} - ${t}`)}return r.json()},createArtwork:async e=>{const r=await fetch(t+"/api/artworks",{method:"POST",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok){const t=await r.text();throw Error(`Failed to create artwork: ${r.status} - ${t}`)}return r.json()},updateArtwork:async(e,r)=>{const a=await fetch(`${t}/api/artworks/${e}`,{method:"PUT",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"},body:JSON.stringify(r)});if(!a.ok){const t=await a.text();throw Error(`Failed to update artwork: ${a.status} - ${t}`)}return a.json()},deleteArtwork:async e=>{const r=await fetch(`${t}/api/artworks/${e}`,{method:"DELETE",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!r.ok){const t=await r.text();throw Error(`Failed to delete artwork: ${r.status} - ${t}`)}return r.json()},getCurrentUser:async()=>{const e=await fetch(t+"/api/users/profile",{method:"GET",headers:{Authorization:"Bearer "+localStorage.getItem("token"),"Content-Type":"application/json"}});if(!e.ok){const t=await e.text();throw Error(`Failed to fetch current user: ${e.status} - ${t}`)}return e.json()}};export{r as a,e as b};
